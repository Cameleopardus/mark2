#!/usr/bin/python

import os
import os.path
import signal
import subprocess
import sys

import aclient

def run_server():
    # let twistd run our our server
    
    # we need the path to pass to twistd as absolute
    path = os.path.abspath(' '.join(args) if args else '.')
    pidfile = os.path.join(path, 'mark2.pid')
    
    # move to the directory this script is in
    os.chdir(sys.path[0])
    
    # look at output
    r, w = os.pipe()
    
    # run everything
    subprocess.call(['twistd'] + ['--pidfile', pidfile, '--logfile', '/dev/null'] + ['mark2'] + ['--dir', path, '--fd', str(w)])
    
    # close our copy of the write end of the pipe
    os.close(w)
    
    # write output
    while True:
        read = os.read(r, 512)
        if not read: break
        sys.stdout.write(read)

def kill_server():
    path = os.path.abspath(' '.join(args) if args else '.')
    pidfile = os.path.join(path, 'mark2.pid')
    with open(pidfile, 'r') as f:
        pid = int(f.readline())
    os.kill(pid, signal.SIGINT)

def run_client():
    # run the client in our own context, why not
    if len(args) >= 1:
        return aclient.main(args[0])
    else:
        return aclient.main()

# never mind how someone managed to import this, stop them
if __name__ != '__main__':
    print "You're doing it wrong."
    sys.exit(1)

# process arguments
if len(sys.argv) >= 2:
    command = sys.argv[1]
    args = sys.argv[2:]
else:
    command = ''
    args = []

if command.lower() == 'attach':
    run_client()
elif command.lower() == 'start':
    run_server()
elif command.lower() == 'kill':
    kill_server()
else:
    print '''

mark2 start [path/to/server]
mark2 attach [servername]

'''

